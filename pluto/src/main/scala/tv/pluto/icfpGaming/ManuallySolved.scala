package tv.pluto.icfpGaming

import spire.math.Rational
import tv.pluto.icfp.{Parser, Point}

object ManuallySolved {

  private val keyA = Parser.parserProblem(
    """
      |1
      |4
      |0,0
      |1,0
      |1/2,1/2
      |0,1/2
      |5
      |1/2,1/2 1,0
      |0,0 1,0
      |0,0 0,1/2
      |0,1/2 1/2,1/2
      |0,0 1/2,1/2""".stripMargin.trim
  )

  private val solA = Solution.parse(
    """7
      |0,0
      |1,0
      |1,1
      |0,1
      |0,1/2
      |1/2,1/2
      |1/2,1
      |4
      |4 0 1 5 4
      |4 1 2 6 5
      |3 4 5 3
      |3 5 6 3
      |0,0
      |1,0
      |0,0
      |0,0
      |0,1/2
      |1/2,1/2
      |0,1/2""".stripMargin.trim)

  private val keyB = Parser.parserProblem(
    """
      |1
      |4
      |0,1
      |1,0
      |1,1/20
      |1/20,1
      |42
      |9/10,1/10 9/10,3/20
      |3/5,2/5 3/5,9/20
      |11/20,9/20 11/20,1/2
      |1/20,19/20 1/10,19/20
      |4/5,1/5 4/5,1/4
      |4/5,1/5 17/20,1/5
      |3/4,1/4 3/4,3/10
      |1/20,19/20 1/20,1
      |9/20,11/20 1/2,11/20
      |7/20,13/20 7/20,7/10
      |1/2,1/2 1/2,11/20
      |1/20,1 1,1/20
      |3/20,17/20 3/20,9/10
      |2/5,3/5 2/5,13/20
      |17/20,3/20 17/20,1/5
      |3/10,7/10 7/20,7/10
      |17/20,3/20 9/10,3/20
      |0,1 1/20,1
      |7/20,13/20 2/5,13/20
      |13/20,7/20 7/10,7/20
      |13/20,7/20 13/20,2/5
      |1/4,3/4 3/10,3/4
      |7/10,3/10 7/10,7/20
      |3/4,1/4 4/5,1/4
      |19/20,1/20 1,1/20
      |11/20,9/20 3/5,9/20
      |1/10,9/10 1/10,19/20
      |9/20,11/20 9/20,3/5
      |19/20,1/20 19/20,1/10
      |7/10,3/10 3/4,3/10
      |1,0 1,1/20
      |1/5,4/5 1/5,17/20
      |9/10,1/10 19/20,1/10
      |3/20,17/20 1/5,17/20
      |1/2,1/2 11/20,1/2
      |1/5,4/5 1/4,4/5
      |1/4,3/4 1/4,4/5
      |0,1 1,0
      |3/5,2/5 13/20,2/5
      |1/10,9/10 3/20,9/10
      |2/5,3/5 9/20,3/5
      |3/10,7/10 3/10,3/4
    """.stripMargin.trim)

  private val solB = Solution.parse(
    """
      |80
      |0,0
      |0,1/20
      |1/20,0
      |0,1/10
      |1/10,0
      |0,3/20
      |3/20,0
      |0,1/5
      |1/5,0
      |0,1/4
      |1/4,0
      |0,3/10
      |3/10,0
      |0,7/20
      |7/20,0
      |0,2/5
      |2/5,0
      |0,9/20
      |9/20,0
      |0,1/2
      |1/2,0
      |0,11/20
      |11/20,0
      |0,3/5
      |3/5,0
      |0,13/20
      |13/20,0
      |0,7/10
      |7/10,0
      |0,3/4
      |3/4,0
      |0,4/5
      |4/5,0
      |0,17/20
      |17/20,0
      |0,9/10
      |9/10,0
      |0,19/20
      |19/20,0
      |0,1
      |1,0
      |1/20,1
      |1,1/20
      |1/10,1
      |1,1/10
      |3/20,1
      |1,3/20
      |1/5,1
      |1,1/5
      |1/4,1
      |1,1/4
      |3/10,1
      |1,3/10
      |7/20,1
      |1,7/20
      |2/5,1
      |1,2/5
      |9/20,1
      |1,9/20
      |1/2,1
      |1,1/2
      |11/20,1
      |1,11/20
      |3/5,1
      |1,3/5
      |13/20,1
      |1,13/20
      |7/10,1
      |1,7/10
      |3/4,1
      |1,3/4
      |4/5,1
      |1,4/5
      |17/20,1
      |1,17/20
      |9/10,1
      |1,9/10
      |19/20,1
      |1,19/20
      |1,1
      |40
      |3 0 1 2
      |3 77 78 79
      |4 1 2 4 3
      |4 3 4 6 5
      |4 5 6 8 7
      |4 7 8 10 9
      |4 9 10 12 11
      |4 11 12 14 13
      |4 13 14 16 15
      |4 15 16 18 17
      |4 17 18 20 19
      |4 19 20 22 21
      |4 21 22 24 23
      |4 23 24 26 25
      |4 25 26 28 27
      |4 27 28 30 29
      |4 29 30 32 31
      |4 31 32 34 33
      |4 33 34 36 35
      |4 35 36 38 37
      |4 37 38 40 39
      |4 39 40 42 41
      |4 41 42 44 43
      |4 43 44 46 45
      |4 45 46 48 47
      |4 47 48 50 49
      |4 49 50 52 51
      |4 51 52 54 53
      |4 53 54 56 55
      |4 55 56 58 57
      |4 57 58 60 59
      |4 59 60 62 61
      |4 61 62 64 63
      |4 63 64 66 65
      |4 65 66 68 67
      |4 67 68 70 69
      |4 69 70 72 71
      |4 71 72 74 73
      |4 73 74 76 75
      |4 75 76 78 77
      |1/2,1/2
      |1/2,11/20
      |11/20,1/2
      |9/20,11/20
      |11/20,9/20
      |9/20,3/5
      |3/5,9/20
      |2/5,3/5
      |3/5,2/5
      |2/5,13/20
      |13/20,2/5
      |7/20,13/20
      |13/20,7/20
      |7/20,7/10
      |7/10,7/20
      |3/10,7/10
      |7/10,3/10
      |3/10,3/4
      |3/4,3/10
      |1/4,3/4
      |3/4,1/4
      |1/4,4/5
      |4/5,1/4
      |1/5,4/5
      |4/5,1/5
      |1/5,17/20
      |17/20,1/5
      |3/20,17/20
      |17/20,3/20
      |3/20,9/10
      |9/10,3/20
      |1/10,9/10
      |9/10,1/10
      |1/10,19/20
      |19/20,1/10
      |1/20,19/20
      |19/20,1/20
      |1/20,1
      |1,1/20
      |0,1
      |1,0
      |1/20,1
      |1,1/20
      |1/20,19/20
      |19/20,1/20
      |1/10,19/20
      |19/20,1/10
      |1/10,9/10
      |9/10,1/10
      |3/20,9/10
      |9/10,3/20
      |3/20,17/20
      |17/20,3/20
      |1/5,17/20
      |17/20,1/5
      |1/5,4/5
      |4/5,1/5
      |1/4,4/5
      |4/5,1/4
      |1/4,3/4
      |3/4,1/4
      |3/10,3/4
      |3/4,3/10
      |3/10,7/10
      |7/10,3/10
      |7/20,7/10
      |7/10,7/20
      |7/20,13/20
      |13/20,7/20
      |2/5,13/20
      |13/20,2/5
      |2/5,3/5
      |3/5,2/5
      |9/20,3/5
      |3/5,9/20
      |9/20,11/20
      |11/20,9/20
      |1/2,11/20
      |11/20,1/2
      |1/2,1/2
    """.stripMargin.trim)

  val hardcodedSolutions = Map(keyA -> solA, keyB -> solB)

  def moveSolution(parsedSol: Solution, xTrans: Rational, yTrans: Rational): Solution = {
    val skeleton = parsedSol.skeleton
    val facets = parsedSol.facets
    val silhouette = parsedSol.silhouette

    // Only need to move silhouette
    val newSil = silhouette.map { aPoint => aPoint.add(Point(xTrans, yTrans)) }

    Solution(skeleton, facets, newSil)
  }

  def main(args: Array[String]) {
    println(moveSolution(solA, Rational(0, 1), Rational(0, 1)))
  }

}

