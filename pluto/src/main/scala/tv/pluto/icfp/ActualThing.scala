package tv.pluto.icfp

object ActualThing {

  val assignment39 =
    """
      |1
      |5
      |-1/2,-1/2
      |1/2,-1/2
      |1/2,0
      |0,1/2
      |-1/2,0
      |7
      |-1/2,-1/2 1/2,-1/2
      |-1/2,-1/2 -1/2,0
      |-1/2,0 1/2,0
      |0,0 0,1/2
      |1/2,-1/2 1/2,0
      |-1/2,0 0,1/2
      |1/2,0 0,1/2
    """.stripMargin

  val assignment17 =
    """
      |1
      |6
      |0,0
      |1/2,1/2
      |3/4,1
      |3/5,6/5
      |1/3,1
      |0,1
      |8
      |1/2,1/2 3/4,1
      |0,0 1/2,1/2
      |0,0 0,1
      |1/2,1/2 1/2,1
      |1/2,1/2 1/3,1
      |1/3,1 3/5,6/5
      |3/4,1 3/5,6/5
      |0,1 3/4,1
    """.stripMargin

  val assignment18 =
    """
      |1
      |9
      |0,1/2
      |1/2,1/2
      |1,3/4
      |1,1
      |7/8,1
      |21/25,28/25
      |3/5,21/20
      |13/22,1
      |0,1
      |10
      |1/2,1/2 3/5,21/20
      |1/2,1/2 7/8,1
      |0,1/2 0,1
      |1,3/4 1,1
      |1/2,1/2 1,3/4
      |7/8,1 21/25,28/25
      |0,1/2 1/2,1/2
      |3/5,21/20 21/25,28/25
      |1,3/4 3/5,21/20
      |0,1 1,1
    """.stripMargin

  def main(args: Array[String]) {
    val problem = Parser.parserProblem(
      """
        |1
        |8
        |3505/4033,-125/4033
        |93689/102665,2823/20533
        |1,3/25
        |68/65,3/13
        |1,1/4
        |1,10/21
        |0,38/63
        |-400/4033,883/4033
        |12
        |1,3/25 68/65,3/13
        |3505/4033,-125/4033 1,10/21
        |0,8/25 0,38/63
        |1,3/25 1,10/21
        |6088/52429,146956/262145 223/1990,586/995
        |-400/4033,883/4033 0,38/63
        |0,8/25 223/1990,586/995
        |3505/4033,-125/4033 -400/4033,883/4033
        |1,3/25 0,8/25
        |6088/52429,146956/262145 16/73,42/73
        |68/65,3/13 16/73,42/73
        |1,10/21 0,38/63
      """.stripMargin)


    val edges: Set[Edge] = problem.edges
    val points: Set[Point] = edges.flatMap((edge: Edge) => List(edge.p1, edge.p2))
    val edgesHull: Set[Edge] = ConvexHull.edgesOnConvexHull(points)

    Visualizer.visualize(edgesHull.toSeq)
    Visualizer.visualize(edges.toSeq)
  }

}
