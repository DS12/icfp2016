package tv.pluto.icfp

object ActualThing {

  val ass101 =
    """
      |1
      |15
      |310388465/517884436,85973329/129471109
      |21348/24389,50875/48778
      |364766764/572276111,946795121/1144552222
      |402380/621499,1081733/1242998
      |7405/14297,34489/28594
      |15/29,35/29
      |14769/28594,17245/14297
      |460893/1242998,545060/621499
      |433464041/1144552222,477008164/572276111
      |1058/4205,8079/8410
      |52977/243890,8079/8410
      |255/1682,3619/4205
      |78413889/339688310,159632711/169844155
      |52924659/129471109,346300385/517884436
      |1699/3364,2379/3364
      |35
      |310388465/517884436,85973329/129471109 402380/621499,1081733/1242998
      |310388465/517884436,85973329/129471109 21348/24389,50875/48778
      |233234463365/454547276116,159887973323/227273638058 374098127/726493645,1087061837/1452987290
      |8291845/16406228,5799859/8203114 7405/14297,34489/28594
      |1699/3364,2379/3364 429/841,769/841
      |4140039/8203114,11600005/16406228 14769/28594,17245/14297
      |112914762783/227273638058,319956554885/454547276116 722395077/1452987290,543845567/726493645
      |460893/1242998,545060/621499 14769/28594,17245/14297
      |52924659/129471109,346300385/517884436 460893/1242998,545060/621499
      |233234463365/454547276116,159887973323/227273638058 21348/24389,50875/48778
      |8291845/16406228,5799859/8203114 21348/24389,50875/48778
      |1699/3364,2379/3364 21348/24389,50875/48778
      |374098127/726493645,1087061837/1452987290 402380/621499,1081733/1242998
      |255/1682,3619/4205 52977/243890,8079/8410
      |545451/1414562,562859/707281 429/841,769/841
      |402380/621499,1081733/1242998 7405/14297,34489/28594
      |255/1682,3619/4205 1403323623/5650014610,8079/8410
      |255/1682,3619/4205 1474011/5861770,8079/8410
      |255/1682,3619/4205 1058/4205,8079/8410
      |14769/28594,17245/14297 15/29,35/29
      |52924659/129471109,346300385/517884436 52977/243890,8079/8410
      |52924659/129471109,346300385/517884436 1699/3364,2379/3364
      |27262881/67937662,24108514/33968831 722395077/1452987290,543845567/726493645
      |374098127/726493645,1087061837/1452987290 444659/707281,1117331/1414562
      |112914762783/227273638058,319956554885/454547276116 1403323623/5650014610,8079/8410
      |4140039/8203114,11600005/16406228 1474011/5861770,8079/8410
      |1699/3364,2379/3364 1058/4205,8079/8410
      |722395077/1452987290,543845567/726493645 460893/1242998,545060/621499
      |444659/707281,1117331/1414562 429/841,769/841
      |20680714/33968831,47873161/67937662 27262881/67937662,24108514/33968831
      |310388465/517884436,85973329/129471109 1699/3364,2379/3364
      |20680714/33968831,47873161/67937662 374098127/726493645,1087061837/1452987290
      |722395077/1452987290,543845567/726493645 545451/1414562,562859/707281
      |7405/14297,34489/28594 15/29,35/29
      |52977/243890,8079/8410 1058/4205,8079/8410
      |
    """.stripMargin

  val assignment39 =
    """
      |1
      |5
      |-1/2,-1/2
      |1/2,-1/2
      |1/2,0
      |0,1/2
      |-1/2,0
      |7
      |-1/2,-1/2 1/2,-1/2
      |-1/2,-1/2 -1/2,0
      |-1/2,0 1/2,0
      |0,0 0,1/2
      |1/2,-1/2 1/2,0
      |-1/2,0 0,1/2
      |1/2,0 0,1/2
    """.stripMargin

  val assignment17 =
    """
      |1
      |6
      |0,0
      |1/2,1/2
      |3/4,1
      |3/5,6/5
      |1/3,1
      |0,1
      |8
      |1/2,1/2 3/4,1
      |0,0 1/2,1/2
      |0,0 0,1
      |1/2,1/2 1/2,1
      |1/2,1/2 1/3,1
      |1/3,1 3/5,6/5
      |3/4,1 3/5,6/5
      |0,1 3/4,1
    """.stripMargin

  val assignment18 =
    """
      |1
      |9
      |0,1/2
      |1/2,1/2
      |1,3/4
      |1,1
      |7/8,1
      |21/25,28/25
      |3/5,21/20
      |13/22,1
      |0,1
      |10
      |1/2,1/2 3/5,21/20
      |1/2,1/2 7/8,1
      |0,1/2 0,1
      |1,3/4 1,1
      |1/2,1/2 1,3/4
      |7/8,1 21/25,28/25
      |0,1/2 1/2,1/2
      |3/5,21/20 21/25,28/25
      |1,3/4 3/5,21/20
      |0,1 1,1
    """.stripMargin

  def main(args: Array[String]) {
    val problem = Parser.parserProblem(ass101)

    val edges: Set[Edge] = problem.edges
    val points: Set[Point] = edges.flatMap((edge: Edge) => List(edge.p1, edge.p2))
    val edgesHull: Set[Edge] = ConvexHull.edgesOnConvexHull(points)

    Visualizer.visualize(edgesHull.toSeq)
    Visualizer.visualize(edges.toSeq)
  }

}
